#!/usr/bin/env node
import { promises as fs } from 'fs';
import { createHash } from 'crypto';
import { dirname, relative, resolve, sep } from 'path';
import { fileURLToPath } from 'url';

const __dirname = dirname(fileURLToPath(import.meta.url));
const projectRoot = resolve(__dirname, '..');
const distDir = resolve(projectRoot, 'dist');
const output = resolve(projectRoot, '..', 'Chronicae', 'Server', 'VisionWebApp.generated.swift');

const toPosixPath = (value) => value.split(sep).join('/');

const contentTypeFor = (filePath) => {
    const lower = filePath.toLowerCase();
    if (lower.endsWith('.html')) return 'text/html; charset=utf-8';
    if (lower.endsWith('.js')) return 'text/javascript; charset=utf-8';
    if (lower.endsWith('.css')) return 'text/css; charset=utf-8';
    if (lower.endsWith('.json')) return 'application/json; charset=utf-8';
    if (lower.endsWith('.webmanifest')) return 'application/manifest+json';
    if (lower.endsWith('.svg')) return 'image/svg+xml';
    if (lower.endsWith('.png')) return 'image/png';
    if (lower.endsWith('.jpg') || lower.endsWith('.jpeg')) return 'image/jpeg';
    if (lower.endsWith('.gif')) return 'image/gif';
    if (lower.endsWith('.webp')) return 'image/webp';
    if (lower.endsWith('.woff2')) return 'font/woff2';
    if (lower.endsWith('.woff')) return 'font/woff';
    return 'application/octet-stream';
};

const swiftStringLiteral = (value) =>
    value
        .replace(/\\/g, '\\\\')
        .replace(/"/g, '\\"');

async function collectAssets() {
    const assets = [];

    async function walk(currentDir) {
        const entries = await fs.readdir(currentDir, { withFileTypes: true });
        for (const entry of entries) {
            if (entry.name.startsWith('.')) {
                continue;
            }
            const fullPath = resolve(currentDir, entry.name);
            if (entry.isDirectory()) {
                await walk(fullPath);
                continue;
            }

            const relPath = toPosixPath(relative(distDir, fullPath));
            const data = await fs.readFile(fullPath);
            const base64 = data.toString('base64');
            const hash = createHash('sha256').update(data).digest('hex');
            const contentType = contentTypeFor(relPath);

            assets.push({
                path: relPath,
                base64,
                hash,
                contentType
            });
        }
    }

    await walk(distDir);
    assets.sort((a, b) => a.path.localeCompare(b.path));
    return assets;
}

async function ensureDistExists() {
    try {
        const stats = await fs.stat(distDir);
        if (!stats.isDirectory()) {
            throw new Error('dist exists but is not a directory');
        }
    } catch (error) {
        throw new Error(`dist directory not found. Did you run \`npm run build\`? (${error.message})`);
    }
}

function buildFingerprint(assets) {
    const hasher = createHash('sha256');
    for (const asset of assets) {
        hasher.update(asset.path, 'utf8');
        hasher.update(asset.hash, 'utf8');
    }
    return hasher.digest('hex');
}

function renderSwift(assets, fingerprint) {
    const generatedAt = new Date().toISOString();
    const definitions = assets
        .map((asset) => `        \"${swiftStringLiteral(asset.path)}\": VisionWebAppAsset(contentType: \"${swiftStringLiteral(asset.contentType)}\", base64: \"${asset.base64}\", hash: \"${asset.hash}\")`)
        .join(',\n');

    const assetsBody = definitions.length > 0 ? `\n${definitions}\n    ` : '';

    return `// Auto-generated by vision-spa/scripts/embed.js\n// Do not edit directly.\n\nimport Foundation\n\nenum VisionWebAppGenerated {\n    static let generatedAt = \"${generatedAt}\"\n    static let buildFingerprint = \"${fingerprint}\"\n    static let assets: [String: VisionWebAppAsset] = [${assetsBody}]\n}\n`;
}

async function main() {
    await ensureDistExists();
    const assets = await collectAssets();
    const fingerprint = buildFingerprint(assets);
    const swiftSource = renderSwift(assets, fingerprint);
    await fs.writeFile(output, swiftSource, 'utf8');
    console.log(`Embedded ${assets.length} web assets into VisionWebApp.generated.swift`);
}

main().catch((error) => {
    console.error('Failed to embed web app assets:', error);
    process.exit(1);
});
